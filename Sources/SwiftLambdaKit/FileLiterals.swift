struct FileLiterals {
    static let BuilderDockerfile = [
        "FROM swift",
        "RUN apt-get update",
        "RUN apt-get install -y zip",
        "WORKDIR /app",
        "COPY .swift-lambda/index.js .build/debug/",
        "COPY .swift-lambda/resolvedDeps.py .build/debug/",
        "RUN cd .build/debug && zip /app/lambda.zip index.js",
        "<aptDependencies>",
        "COPY Package.swift .",
        "RUN swift package fetch",
        "COPY . .",
        "RUN swift build",
        "WORKDIR .build/debug",
        "RUN ldd <packageName> | python resolvedDeps.py | xargs zip /app/lambda.libs.zip -j",
        "RUN mv <packageName> swiftLambdaEntrypoint",
        "RUN zip /app/lambda.zip swiftLambdaEntrypoint",
    ].joined(separator: "\n")

    static let CloudFormation = [
        "{",
        "  \"AWSTemplateFormatVersion\": \"2010-09-09\",",
        "  \"Metadata\": {},",
        "  \"Parameters\": {",
        "    \"S3Bucket\": {",
        "      \"Type\": \"String\"",
        "    },",
        "    \"S3Key\": {",
        "      \"Type\": \"String\"",
        "    },",
        "    \"S3ObjectVersion\": {",
        "      \"Type\": \"String\"",
        "    },",
        "    \"Role\": {",
        "      \"Type\": \"String\"",
        "    },",
        "    \"LibsS3Bucket\": {",
        "      \"Type\": \"String\"",
        "    },",
        "    \"LibsS3Key\": {",
        "      \"Type\": \"String\"",
        "    },",
        "  },",
        "  \"Resources\": {",
        "    \"MyFunction\": {",
        "      \"Type\": \"AWS::Lambda::Function\",",
        "      \"Properties\": {",
        "        \"Handler\": \"index.handler\",",
        "        \"Role\": {\"Ref\": \"Role\"},",
        "        \"Runtime\": \"nodejs4.3\",",
        "        \"Code\": {",
        "          \"S3Bucket\": {\"Ref\": \"S3Bucket\"},",
        "          \"S3Key\": {\"Ref\": \"S3Key\"},",
        "          \"S3ObjectVersion\": {\"Ref\": \"S3ObjectVersion\"}",
        "        },",
        "        \"MemorySize\": 128,",
        "        \"Timeout\": 30,",
        "        \"Environment\": {",
        "          \"Variables\": {",
        "            \"SWIFTLAMBDA_LIBS_BUCKET\": {\"Ref\": \"LibsS3Bucket\"},",
        "            \"SWIFTLAMBDA_LIBS_KEY\": {\"Ref\": \"LibsS3Key\"}",
        "          }",
        "        }",
        "      }",
        "    }",
        "  },",
        "  \"Outputs\": {",
        "    \"FunctionName\": {",
        "      \"Value\": {\"Ref\": \"MyFunction\"}",
        "    },",
        "    \"FunctionArn\": {",
        "      \"Value\": {\"Fn::GetAtt\": [\"MyFunction\", \"Arn\"]}",
        "    }",
        "  }",
        "}",
    ].joined(separator: "\n")

    static let index = [
        "\"use strict\";",
        "var childProcess = require('child_process');",
        "var fs = require('fs');",
        "let AWS = require('aws-sdk');",
        "",
        "exports.handler = function(event, context, callback) {",
        "    let libsDir = '/tmp/swiftLambdaLibs';",
        "    let loader = libsDir + '/ld-linux-x86-64.so.2'; ",
        "",
        "    let runIt = function() {",
        "        let input = { event: event, context: context };",
        "        let child = childProcess.spawnSync(loader, ['--library-path', libsDir, './swiftLambdaEntrypoint'], {",
        "            input: JSON.stringify(input)",
        "        });",
        "",
        "        let output = JSON.parse(child.stdout);",
        "        console.log(output);",
        "        callback(null, output);",
        "    };",
        "",
        "    if (fs.existsSync(loader)) {",
        "        runIt();",
        "    } else {",
        "        let s3 = new AWS.S3();",
        "        let zipPath = '/tmp/swiftLambdaLibs.zip';",
        "        let libsZipFileStream = fs.createWriteStream(zipPath);",
        "        ",
        "        libsZipFileStream.on('close', function() {",
        "            let child = childProcess.spawnSync('unzip', [zipPath, '-d', libsDir]);",
        "            runIt();",
        "        });",
        "",
        "        let params = { ",
        "            Bucket: process.env.SWIFTLAMBDA_LIBS_BUCKET, ",
        "            Key: process.env.SWIFTLAMBDA_LIBS_KEY ",
        "        };",
        "",
        "        s3.getObject(params).createReadStream().pipe(libsZipFileStream);",
        "    }",
        "};",
    ].joined(separator: "\n")

    static let InitFiles_dockerignore = [
        ".build",
        ".git",
        "Packages",
    ].joined(separator: "\n")

    static let InitFiles_main = [
        "import Foundation",
        "import SwiftLambdaRuntime",
        "",
        "SwiftLambdaRuntime().run { event, context, callback in",
        "    let name = event[\"name\"] ?? \"World\" ",
        "    callback([\"output\": \"Hello, \\(name)\"])",
        "}",
    ].joined(separator: "\n")

    static let InitFiles_Package = [
        "import PackageDescription",
        "",
        "let package = Package(",
        "    name: \"<name>\",",
        "    dependencies: [",
        "        // .Package(url: \"https://github.com/awswift/awswift\", majorVersion: 0, minor: 3)",
        "        .Package(url: \"https://github.com/awswift/swift-lambda-runtime\", majorVersion: 0, minor: 1)",
        "    ]",
        ")",
    ].joined(separator: "\n")

    static let InitFiles_swift_lambda = [
        "{",
        "    \"Name\": \"<name>\",",
        "    \"Description\": \"\",",
        "    \"Memory\": 128,",
        "    \"Timeout\": 30",
        "}",
    ].joined(separator: "\n")

    static let InitialSetup = [
        "---",
        "AWSTemplateFormatVersion: '2010-09-09'",
        "",
        "Resources:",
        "  CodeStorageBucket:",
        "    Type: AWS::S3::Bucket",
        "    Properties:",
        "      VersioningConfiguration: ",
        "        Status: Enabled",
        "  ExecutionRole:",
        "    Type: AWS::IAM::Role",
        "    Properties:",
        "      AssumeRolePolicyDocument:",
        "        Version: '2012-10-17'",
        "        Statement:",
        "          - Effect: Allow",
        "            Action: sts:AssumeRole",
        "            Principal:",
        "              Service: lambda.amazonaws.com",
        "      ManagedPolicyArns:",
        "        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "      Path: /",
        "      Policies:",
        "        - PolicyName: root",
        "          PolicyDocument:",
        "            Version: \"2012-10-17\"",
        "            Statement:",
        "              - Effect: Allow",
        "                Action: s3:GetObject",
        "                Resource: !Sub arn:aws:s3:::${CodeStorageBucket}/*",
        "",
        "Outputs:",
        "  CodeStorageBucket:",
        "    Description: Default bucket for swift-lambda-managed functions",
        "    Value: !Ref CodeStorageBucket",
        "    Export:",
        "      Name: SwiftLambdaCodeStorageBucket",
        "  ExecutionRoleArn:",
        "    Description: ARN of default Lambda execution role for swift-lambda-managed functions",
        "    Value: !GetAtt ExecutionRole.Arn",
        "    Export:",
        "      Name: SwiftLambdaExecutionRoleArn",
    ].joined(separator: "\n")

    static let resolvedDeps = [
        "#!/usr/bin/env python",
        "",
        "import fileinput",
        "for line in fileinput.input():",
        "    split = line.split()",
        "    if '=>' in split:",
        "        split.remove('=>')",
        "    name = split[-2]",
        "    if name != 'linux-vdso.so.1':",
        "        print(name)",
    ].joined(separator: "\n")

}
